{"version":3,"file":"static/js/949.e6a4bdbc.chunk.js","mappings":"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","sources":["services/api.js","redux/filter/filter-selectors.js","redux/filter/filter-slice.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Home/Home.styled.js","components/CharatersItem/CharatersItem.styled.js","components/CharatersItem/CharatersItem.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst apiInstance = axios.create({\n    baseURL: 'https://rickandmortyapi.com/api/character',\n    params: {\n        // api_key: 'e09f06c48afcb3ebfd8a25b0b6965d1e',\n        // language: 'en-US',\n        // page: `${page}`,\n    },\n});\n\nasync function fetchCharaters() {\n    const response = await apiInstance.get();\n     \n    const charaters = response.data.results;\n\n    if (!charaters.length) {\n        throw new Error(`Sorry, there are no charaters.`)\n    }\n\n    return charaters;\n};\n\nconst api = {\n    fetchCharaters,\n\n};\n\nexport default api;","export const selectFilter = state => state.filter;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst filterInitialState = '';\n\nconst filterSlice = createSlice({\n    name: \"filter\",\n    initialState: filterInitialState,\n    reducers: {\n        setFilter(state, action) {\n            return action.payload;\n        },\n    },\n});\n\nexport const { setFilter } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;","import styled from \"styled-components\";\n\nexport const FieldFilter = styled.label`\n    position: relative;\n    width: 100%;\n`;\n\nexport const InputFilter = styled.input`\n    margin-top: ${p => p.theme.space[2]}px; \n    padding-top: ${p => p.theme.space[3]}px;\n    padding-bottom: ${p => p.theme.space[3]}px;\n    padding-left: 27px;\n    padding-right: ${p => p.theme.space[3]}px;\n    width: 100%;\n    font: inherit;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: ${p => p.theme.radii.normal};\n    \n    background-color: inherit;\n    transition: ${p => p.theme.transition.main};\n    ::placeholder {\n        font-size: ${p => p.theme.fontSizes.s};\n    }\n`;\n\nexport const IconForm = styled.div`\n    position: absolute;\n    top: 15px;\n    left: ${p => p.theme.space[3]}px;\n`;","import { useSelector, useDispatch } from \"react-redux\";\nimport { selectFilter } from \"redux/filter/filter-selectors\";\nimport { setFilter } from \"redux/filter/filter-slice\";\nimport { FieldFilter, InputFilter, IconForm } from \"./Filter.styled\";\nimport { theme } from \"constants/theme\";\nimport { FaSearch } from 'react-icons/fa';\n\nexport const Filter = () => {\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const changeFilter = e => {\n        dispatch(setFilter(e.currentTarget.value));\n    };\n\n    return (\n        <FieldFilter>\n            <IconForm><FaSearch size={17} color={theme.colors.accent} /></IconForm>\n            <InputFilter\n                type=\"text\"\n                value={filter}\n                placeholder=\"Filter by name...\"\n                onChange={changeFilter}\n            />\n        </FieldFilter>\n    );\n}; ","import styled from \"styled-components\";\nimport { theme } from \"constants/theme\";\n\nexport const CharatersList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 32px;\n\n  ${theme.mq.desktop} {\n    gap: 24px 20px;\n  }\n`;","import styled from \"styled-components\";\n\nexport const CharatersCard = styled.li`\n    width: 312px;\n    height: 308px;\n    border-radius: 4px;\n    overflow: hidden;\n    box-shadow: ${p => p.theme.shadow};\n    \n    transform: scale(1);\n    transition: ${p => p.theme.transition};\n\n    &:hover,\n    &:focus{\n        transform: scale(1.03);\n    };\n`;\n\nexport const CharatersImg = styled.img`\n  width: 100%;\n  height: 232px;\n  object-fit: cover;\n`;\n\nexport const CharatersInfo = styled.div`\n  padding: 12px 16px;\n`;\n\nexport const CharatersTitle = styled.h3`\n  font-size: ${p => p.theme.fontSizes.l};\n  font-weight: ${p => p.theme.fontWeights.medium};\n  line-height: 1.5;\n  letter-spacing: 0.15px;\n`;\n\nexport const CharatersText = styled.p`\n  letter-spacing: 0.15px;\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\nimport { CharatersCard, CharatersImg, CharatersInfo, CharatersTitle, CharatersText } from \"./CharatersItem.styled\";\n\nexport const CharatersItem = ({ id, image, name, species}) => {\n    const { pathname, search } = useLocation();\n    const fromPage = `${pathname}${search}`;\n\n    return (\n        <CharatersCard>\n            <Link to={`/${id}`} state={{from: fromPage}}>\n                <CharatersImg src={image} alt={name} width=\"312px\" height=\"232px\"/>\n                <CharatersInfo>\n                    <CharatersTitle>{name}</CharatersTitle>\n                    <CharatersText>{species}</CharatersText>\n                </CharatersInfo>\n            </Link>\n        </CharatersCard>\n    );\n};\n\nCharatersItem.propTypes = {\n    id: PropTypes.number.isRequired,\n    image: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    species: PropTypes.string.isRequired,\n}","import { useState, useEffect } from \"react\";\nimport API from 'services/api';\nimport { Helmet } from 'react-helmet';\nimport { Filter } from \"components/Filter/Filter\";\nimport { Loader } from \"components/Loader/Loader\";\n// import { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\nimport { CharatersList } from \"./Home.styled\";\nimport { CharatersItem } from \"components/CharatersItem/CharatersItem\";\n\nconst Home = () => {\n  const [charaters, setCharaters] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getCharaters();\n\n    async function getCharaters() {\n      try {\n        const fetchCharaters = await API.fetchCharaters();\n        console.log(fetchCharaters);\n        setCharaters(fetchCharaters);\n\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      };\n    };\n  }, []);\n\n  return (\n    <main>\n      <Helmet>\n        <title>Home</title>\n      </Helmet>\n\n      <Filter />\n\n      {isLoading && <Loader />} \n\n      <CharatersList>\n        {charaters.map(({ id, image, name, species }) => (\n          <CharatersItem \n            key={id}\n            id={id}\n            image={image}\n            name={name} \n            species={species}\n          />\n        ))}\n      </CharatersList>\n    </main>\n  );\n};\n\nexport default Home;"],"names":["apiInstance","axios","baseURL","params","fetchCharaters","get","response","charaters","data","results","length","Error","api","selectFilter","state","filter","filterSlice","createSlice","name","initialState","reducers","setFilter","action","payload","actions","reducer","FieldFilter","styled","InputFilter","p","theme","space","radii","normal","transition","main","fontSizes","s","IconForm","Filter","useSelector","dispatch","useDispatch","size","color","type","value","placeholder","onChange","e","currentTarget","CharatersList","CharatersCard","shadow","CharatersImg","CharatersInfo","CharatersTitle","l","fontWeights","medium","CharatersText","CharatersItem","id","image","species","useLocation","pathname","search","fromPage","to","from","src","alt","width","height","useState","setCharaters","isLoading","setIsLoading","useEffect","API","console","log","getCharaters","Helmet","Loader","map"],"sourceRoot":""}