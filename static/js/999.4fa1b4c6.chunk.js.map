{"version":3,"file":"static/js/999.4fa1b4c6.chunk.js","mappings":"0MAEMA,E,OAAcC,EAAAA,OAAa,CAC7BC,QAAS,4CACTC,OAAQ,KAOGC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,sGAC2BJ,EAAYK,MADvC,UACUC,EADV,QAGUC,EAAYD,EAASE,KAAKC,SAEjBC,OALnB,sBAMc,IAAIC,MAAJ,kCANd,gCASWJ,GATX,kEAYA,I,cAAMK,EAAM,CACRR,eAtBJ,WASeA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAiBf,I,SClBaS,EAAS,WA8BrB,E,2BCtCYC,EAAgBC,EAAAA,GAAAA,GAAH,mL,iBCCbC,EAAgBD,EAAAA,GAAAA,GAAH,kZAiBbE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,qEAKVI,EAAYJ,EAAAA,GAAAA,IAAH,+HAQTK,EAAiBL,EAAAA,GAAAA,IAAH,4HAOdM,EAAcN,EAAAA,GAAAA,GAAH,8CAIXO,EAAaP,EAAAA,GAAAA,EAAH,+J,SCxCVQ,EAAgB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAClD,GAA6BC,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OACZC,EAAQ,UAAMF,GAAN,OAAiBC,GAE/B,OACI,SAACd,EAAD,WACI,UAACC,EAAD,CAAYe,GAAE,WAAMR,GAAMS,MAAO,CAACC,KAAMH,GAAxC,WACI,SAACZ,EAAD,CAAWgB,IAAKT,EAAWU,IAAKX,KAChC,UAACL,EAAD,YACI,SAACC,EAAD,UAAcI,KACd,SAACH,EAAD,UAAaK,WAMhC,ECmCD,EA9Ca,WACX,OAAkCU,EAAAA,EAAAA,UAAS,IAA3C,eAAO9B,EAAP,KAAkB+B,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCAId,6GAEiCC,EAAAA,iBAFjC,OAEUtC,EAFV,OAGIuC,QAAQC,IAAIxC,GACZkC,EAAalC,GAJjB,gDAOIuC,QAAQC,IAAR,MAPJ,yBASIJ,GAAa,GATjB,oFAJc,wBACdA,GAAa,GADC,mCAEdK,EAcD,GAAE,KAGD,6BACE,SAACC,EAAA,EAAD,WACE,uCAGF,SAACjC,EAAD,IAEC0B,IAAa,SAACQ,EAAA,EAAD,KAEd,SAACjC,EAAD,UACGP,EAAUyC,KAAI,gBAAGxB,EAAH,EAAGA,GAAIyB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAAb,OACb,SAAC3B,EAAD,CAEEC,GAAIA,EACJyB,KAAMA,EACNC,QAASA,GAHJ1B,EAFM,QAWtB,C","sources":["services/api.js","components/Filter/Filter.jsx","pages/Home/Home.styled.js","components/CharatersItem/CharatersItem.styled.js","components/CharatersItem/CharatersItem.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst apiInstance = axios.create({\n    baseURL: 'https://rickandmortyapi.com/api/character',\n    params: {\n        // api_key: 'e09f06c48afcb3ebfd8a25b0b6965d1e',\n        // language: 'en-US',\n        // page: `${page}`,\n    },\n});\n\nasync function fetchCharaters() {\n    const response = await apiInstance.get();\n     \n    const charaters = response.data.results;\n\n    if (!charaters.length) {\n        throw new Error(`Sorry, there are no charaters.`)\n    }\n\n    return charaters;\n};\n\nconst api = {\n    fetchCharaters,\n\n};\n\nexport default api;","// import { useSelector, useDispatch } from \"react-redux\";\n// import { selectFilter } from \"redux/filter/filter-selectors\";\n// import { setFilter } from \"redux/filter/filter-slice\";\n// import { FieldFilter, InputFilter, IconForm } from \"./Filter.styled\";\n// import { Box } from \"components/Box/Box\";\n// import { theme } from \"theme\";\n// import { Button } from \"components/Button/Button\";\n// import { BsPersonPlus } from 'react-icons/bs';\n// import { FaSearch } from 'react-icons/fa';\n\nexport const Filter = () => {\n    // const filter = useSelector(selectFilter);\n    // const dispatch = useDispatch();\n\n    // const changeFilter = e => {\n    //     dispatch(setFilter(e.currentTarget.value));\n    // };\n\n    // return (\n    //     // <Box display=\"flex\" alignItems=\"center\" justifyContaent=\"center\" gridGap={[2, 2, 3]}\n    //     //     maxWidth={theme.sizes.mediumWidth}\n    //     //     mb={3}\n    //     //     mx=\"auto\"\n    //     //     p={3}\n    //     //     textAlign=\"left\"\n    //     //     borderRadius={theme.radii.box}\n    //     //     boxShadow={theme.shadows.box}\n    //     //     backgroundColor={theme.colors.white}>\n    //     //     <FieldFilter htmlFor=\"\">\n    //     //         <IconForm><FaSearch size={17} color={theme.colors.accent} /></IconForm>\n    //     //         <InputFilter\n    //     //             type=\"text\"\n    //     //             value={filter}\n    //     //             placeholder=\"Search by name\"\n    //     //             onChange={changeFilter}\n    //     //         />\n    //     //     </FieldFilter>\n\n    //     // </Box>\n    // );\n}; ","import styled from \"styled-components\";\n\nexport const CharatersList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n`;","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const CharatersCard = styled.li`\n    width: 312px;\n    height: 308px;\n    border-radius: 4px;\n    overflow: hidden;\n    box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2), \n    0px 3px 4px rgba(0, 0, 0, 0.12), \n    0px 2px 4px rgba(0, 0, 0, 0.14);\n    \n    transform: scale(1);\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus{\n        transform: scale(1.03);\n    };\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const MoviesImg = styled.img`\n  width: 100%;\n  border-radius: 4px;\n  height: 300px;\n  object-fit: cover;\n  margin-bottom: auto;\n`;\n\nexport const MoviesCardInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0 0 0;\n`;\n\nexport const MoviesTitle = styled.h4`\n  max-width: 158px; \n`;\n\nexport const MoviesVote = styled.p`\n  padding: 2px 4px;\n  border-radius: 4px;\n  color: white;\n  background-color: orangered;\n  font-size: 12px; \n  font-weight: 600;\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { CharatersCard, StyledLink, MoviesImg, MoviesCardInfo, MoviesTitle, MoviesVote } from \"./CharatersItem.styled\";\n\nexport const CharatersItem = ({ id, title, imagePath, vote }) => {\n    const { pathname, search } = useLocation();\n    const fromPage = `${pathname}${search}`;\n\n    return (\n        <CharatersCard>\n            <StyledLink to={`/${id}`} state={{from: fromPage}}>\n                <MoviesImg src={imagePath} alt={title} />\n                <MoviesCardInfo>\n                    <MoviesTitle>{title}</MoviesTitle>\n                    <MoviesVote>{vote}\n                    </MoviesVote>\n                </MoviesCardInfo>\n            </StyledLink>\n        </CharatersCard>\n    );\n};\n\nCharatersItem.propTypes = {\n    // id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    // vote: PropTypes.number.isRequired,\n}","import { useState, useEffect } from \"react\";\nimport API from 'services/api';\nimport { Helmet } from 'react-helmet';\nimport { Filter } from \"components/Filter/Filter\";\nimport { Loader } from \"components/Loader/Loader\";\n// import { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\nimport { CharatersList } from \"./Home.styled\";\nimport { CharatersItem } from \"components/CharatersItem/CharatersItem\";\n\nconst Home = () => {\n  const [charaters, setCharaters] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getCharaters();\n\n    async function getCharaters() {\n      try {\n        const fetchCharaters = await API.fetchCharaters();\n        console.log(fetchCharaters);\n        setCharaters(fetchCharaters);\n\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      };\n    };\n  }, []);\n\n  return (\n    <main>\n      <Helmet>\n        <title>Home</title>\n      </Helmet>\n\n      <Filter />\n\n      {isLoading && <Loader />} \n\n      <CharatersList>\n        {charaters.map(({ id, name, species }) => (\n          <CharatersItem \n            key={id}\n            id={id}\n            name={name} \n            species={species}\n          />\n        ))}\n      </CharatersList>\n    </main>\n  );\n};\n\nexport default Home;"],"names":["apiInstance","axios","baseURL","params","fetchCharaters","get","response","charaters","data","results","length","Error","api","Filter","CharatersList","styled","CharatersCard","StyledLink","Link","MoviesImg","MoviesCardInfo","MoviesTitle","MoviesVote","CharatersItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","to","state","from","src","alt","useState","setCharaters","isLoading","setIsLoading","useEffect","API","console","log","getCharaters","Helmet","Loader","map","name","species"],"sourceRoot":""}